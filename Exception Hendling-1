{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93328865-aad8-4981-8ccb-ea2fc507cb39",
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUESTION ANSWER  (1)\n",
    "\n",
    "#What is Exception in python\n",
    "\n",
    "#ANSWER= Errors detected during execution are called exceptions and are not unconditionally fatal\n",
    "\n",
    "#QUESTION= Write the differen,are between Exceptions and syntax errors\n",
    "\n",
    "#ANSWER=\n",
    "\n",
    "#EXCEPTION\n",
    "\"\"\"An exception is an abnormal event that occurs during the execution of a program.Exceptions are usually caused by runtime errors.such as trying to access a file that does not exist. Exception are not syntax errors,\n",
    "but they can still prevent the program from running if they are not handled properly.\"\"\"\n",
    "\n",
    "#SYNTAX\n",
    "\n",
    "\"\"\"A syntax error means thereâ€™s an error in syntax such as misspelled keywords, \n",
    "a missing punctuation character, a missing bracket,\n",
    "a missing closing parenthesis or any errors in basic framing sequence of characters or\n",
    "tokens which is necessarily to be written in a particular programming language.\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e9bf9f30-fa60-4258-8d9b-a4427e1102cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is my file [Errno 2] No such file or directory: 'text11.txt'\n"
     ]
    }
   ],
   "source": [
    "#QUESTION(2)\n",
    "#ANSWER=\n",
    "\"when an exception is not handled properly they can still prevent the program from running.\"\n",
    "#EXAMPLE\n",
    "\n",
    "try:\n",
    "    f=open(\"text11.txt\",'r')\n",
    "    f.write(\"write into my file\")\n",
    "except Exception as e:\n",
    "    print(\"this is my file\",e)\n",
    "           \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "beeb99b2-7f9b-42bc-b14c-6a6eb117e425",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is my except block [Errno 2] No such file or directory: 'test2.txt'\n"
     ]
    }
   ],
   "source": [
    "#QUESTION(3)\n",
    "#ANSWER\n",
    "\"try and except block are used to catch and handle exceptions.\"\n",
    "#EXAMPLE\n",
    "try:\n",
    "    f=open(\"test2.txt\",'r')\n",
    "except Exception as e:\n",
    "    print(\"this is my except block\",e)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0d2bbf89-cad6-4f1d-b453-40c1e3ab330b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is my except block [Errno 2] No such file or directory: 'test6.txt'\n"
     ]
    }
   ],
   "source": [
    "#QUESTION(4)\n",
    "#1) TRY AND ELSE\n",
    "try:\n",
    "    f=open(\"test6.txt\",'r')\n",
    "    f.write(\"this is my course\")\n",
    "except Exception as e:\n",
    "    print(\"this is my except block\",e)\n",
    "else:\n",
    "    print(\"this will be executed once your try will executed without errors\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b35bf761-05c8-4a1a-b587-af2a264e39d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finally will executed itself in any situation\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'text4.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[29], line 4\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#2)FINALLY\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m----> 4\u001b[0m     f\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtext4.txt\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m     f\u001b[38;5;241m.\u001b[39mwrite(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwrite something\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/IPython/core/interactiveshell.py:282\u001b[0m, in \u001b[0;36m_modified_open\u001b[0;34m(file, *args, **kwargs)\u001b[0m\n\u001b[1;32m    275\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m file \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m}:\n\u001b[1;32m    276\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    277\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIPython won\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt let you open fd=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfile\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m by default \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    278\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    279\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myou can use builtins\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m open.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    280\u001b[0m     )\n\u001b[0;32m--> 282\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mio_open\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'text4.txt'"
     ]
    }
   ],
   "source": [
    "#2)FINALLY\n",
    "\n",
    "try:\n",
    "    f=open(\"text4.txt\",'r')\n",
    "    f.write(\"write something\")\n",
    "finally:\n",
    "    print(\"finally will executed itself in any situation\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7cad27fa-f91b-4303-8dcb-bd3e7378ae40",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3)RAISE\n",
    "class vaildage(Exception):\n",
    "    \n",
    "    def __init__(self,mes):\n",
    "        self.mes=mes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1477c3c5-be4f-4ec4-986b-abb4439edccc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def validatedage(age):\n",
    "    if age<0:\n",
    "        raise vaildage(\"entered age is negative\")\n",
    "    elif age>200:\n",
    "        raise vaildage(\"entered age is very very high\")\n",
    "    else:\n",
    "        print(\"age is valid\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c944fc39-d8be-42a4-8882-c15cae120736",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your age 45\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age is valid\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    age=int(input(\"enter your age\"))\n",
    "    validatedage(age)\n",
    "except vaildage as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f611b5f7-8df3-4020-b508-5afb835de56d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUESTION(5)\n",
    "#ANSWER\n",
    "\"\"\"Regular classes that inherit from custom Exception make it very easy to create our own custom Exception which can make our programs easier to follow and more readable.\n",
    "Custom Exception can make your code much more readable and robust, and reduce the amount of code you write later to try and figure out what exactly went wrong.\"\"\"\n",
    "\n",
    "#EXAMPLE\n",
    "\n",
    "class validage(Exception):\n",
    "    \n",
    "    def __init__(self,mes):\n",
    "        self.mes=mes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7a1e5348-be51-4b6e-a63e-c0563eba6e06",
   "metadata": {},
   "outputs": [],
   "source": [
    "def vailidae(age):\n",
    "    if age<18:\n",
    "        raise validage(\"not allow to enter our company\")\n",
    "    elif age >30:\n",
    "        raise validage(\"Yes company to allow\")\n",
    "    else:\n",
    "        print(\"allow to all in my company\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "54fb85b5-4b29-4154-b623-09e0a829c565",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter our age 67\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yes company to allow\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    age=int(input(\"enter our age\"))\n",
    "    vailidae(age)\n",
    "except validage as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a07c87a2-1d2f-490d-82c9-0ebb54b037b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUESTION(6)\n",
    "# ANSWER\n",
    "class passingmark(Exception):\n",
    "    \n",
    "    def __init__(self,quali):\n",
    "        self.quali=quali"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c59a0335-116e-45aa-86d5-9a072d3cac52",
   "metadata": {},
   "outputs": [],
   "source": [
    "def passedmark(marks):\n",
    "    if marks<0:\n",
    "        raise passingmark(\"marked not sufficient for qualifed\")\n",
    "    elif marks>600:\n",
    "        raise passingmark(\"mark is very very high\")\n",
    "    else:\n",
    "        print(\"over all good\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d1035b54-40a5-4e08-aa86-364d8266f037",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enterd your mark 56\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "over all good\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    marks=int(input('enterd your mark'))\n",
    "    passedmark(marks)\n",
    "\n",
    "except passingmark as e:\n",
    "    print(e)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
